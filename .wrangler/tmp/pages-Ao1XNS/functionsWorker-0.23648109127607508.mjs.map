{
  "version": 3,
  "sources": ["../bundle-AhkaoE/checked-fetch.js", "../../../functions/ai-airtable.js", "../../../functions/ai-airtable-mitbotanswer.js", "../../../functions/ai-airtable-start.js", "functionsRoutes-0.37549243953931777.mjs", "file:///C:/Users/marti/AppData/Roaming/npm/node_modules/wrangler/node_modules/path-to-regexp/src/index.ts", "file:///C:/Users/marti/AppData/Roaming/npm/node_modules/wrangler/templates/pages-template-worker.ts", "file:///C:/Users/marti/AppData/Roaming/npm/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "file:///C:/Users/marti/AppData/Roaming/npm/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-AhkaoE/middleware-insertion-facade.js", "file:///C:/Users/marti/AppData/Roaming/npm/node_modules/wrangler/templates/middleware/common.ts", "../bundle-AhkaoE/middleware-loader.entry.ts"],
  "sourceRoot": "D:\\Documents\\CODING\\JAVASCRIPT\\react-chatbot-airtable\\.wrangler\\tmp\\pages-Ao1XNS\\functionsWorker-0.23648109127607508.mjs",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "// functions/ai-airtable.js\n\nexport async function onRequest(context) {\n  const { request, env } = context;\n  \n  console.log(\"=== AI Function Called ===\");\n  console.log(\"Method:\", request.method);\n  \n  // \u2705 CORS Preflight Handling\n  if (request.method === \"OPTIONS\") {\n    return new Response(null, {\n      status: 204,\n      headers: {\n        \"Access-Control-Allow-Origin\": \"*\",\n        \"Access-Control-Allow-Methods\": \"GET, POST, OPTIONS\",\n        \"Access-Control-Allow-Headers\": \"Content-Type\",\n      },\n    });\n  }\n\n  // \u2705 Only accept POST\n  if (request.method !== \"POST\") {\n    return new Response(JSON.stringify({ error: `Method ${request.method} not allowed` }), { \n      status: 405,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Origin\": \"*\",\n      }\n    });\n  }\n\n  try {\n    const body = await request.text();\n    console.log(\"Raw request body length:\", body.length);\n    \n    if (!body) {\n      return new Response(\n        JSON.stringify({ error: \"Empty request body\" }),\n        {\n          status: 400,\n          headers: { \n            \"Content-Type\": \"application/json\",\n            \"Access-Control-Allow-Origin\": \"*\"\n          },\n        }\n      );\n    }\n    \n    let parsedBody;\n    try {\n      parsedBody = JSON.parse(body);\n    } catch (e) {\n      console.error(\"JSON Parse Error:\", e);\n      return new Response(\n        JSON.stringify({ error: \"Invalid JSON in request body\" }),\n        {\n          status: 400,\n          headers: { \n            \"Content-Type\": \"application/json\",\n            \"Access-Control-Allow-Origin\": \"*\"\n          },\n        }\n      );\n    }\n\n    console.log(\"Request contains files:\", parsedBody.files?.length || 0);\n    console.log(\"Message length:\", parsedBody.message?.length || 0);\n    \n    const { message, messages = [], files = [] } = parsedBody;\n\n    if (!message) {\n      return new Response(\n        JSON.stringify({ error: \"Missing 'message' field\" }),\n        {\n          status: 400,\n          headers: { \n            \"Content-Type\": \"application/json\",\n            \"Access-Control-Allow-Origin\": \"*\"\n          },\n        }\n      );\n    }\n\n    // \u2705 Enhanced system prompt for file handling\n    let systemPrompt = \"Du bist ein hilfsreicher AI-Assistent. Antworte h\u00F6flich und informativ auf Deutsch.\";\n    \n    if (files.length > 0) {\n      systemPrompt += ` \n      \nWICHTIG: Der Benutzer hat ${files.length} Textdatei(en) hochgeladen. Diese Dateien sind im Nachrichteninhalt unter \"[Uploaded Files Context:]\" zu finden. \n- Lies und analysiere den Inhalt dieser Dateien sorgf\u00E4ltig\n- Beziehe dich direkt auf den Dateiinhalt in deinen Antworten\n- Wenn der Benutzer Fragen zu den Dateien stellt, zitiere relevante Teile daraus\n- Best\u00E4tige explizit, dass du die Dateien gelesen hast`;\n    }\n\n    // \u2705 Prepare messages for OpenAI Chat API\n    const chatMessages = [\n      {\n        role: \"system\",\n        content: systemPrompt\n      }\n    ];\n\n    // Add conversation history (excluding the current message to avoid duplication)\n    if (messages.length > 0) {\n      // Only add messages that aren't the current one\n      const historyMessages = messages.slice(0, -1).map(msg => ({\n        role: msg.role,\n        content: msg.content\n      }));\n      chatMessages.push(...historyMessages);\n    }\n\n    // Add the current message (which includes file content)\n    chatMessages.push({\n      role: \"user\",\n      content: message\n    });\n\n    console.log(\"=== DEBUG: Final message to OpenAI ===\");\n    console.log(\"System prompt:\", systemPrompt);\n    console.log(\"Total messages:\", chatMessages.length);\n    console.log(\"Current message preview:\", message.substring(0, 500) + \"...\");\n    console.log(\"=====================================\");\n\n    // \u2705 Send request to OpenAI Chat API with increased max_tokens for file responses\n    const apiResponse = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n      method: \"POST\",\n      headers: {\n        \"Authorization\": `Bearer ${env.VITE_APP_OPENAI_API_KEY}`,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        model: \"gpt-3.5-turbo\",\n        messages: chatMessages,\n        max_tokens: files.length > 0 ? 2000 : 1000, // More tokens when files are involved\n        temperature: 0.7,\n      }),\n    });\n\n    if (!apiResponse.ok) {\n      const errorText = await apiResponse.text();\n      console.error(\"OpenAI API Error:\", apiResponse.status, errorText);\n      \n      // Check for context length error\n      if (errorText.includes(\"context_length_exceeded\")) {\n        return new Response(JSON.stringify({ \n          error: \"Die hochgeladenen Dateien sind zu gro\u00DF. Bitte verwende kleinere Dateien oder teile sie auf.\",\n          choices: [{\n            message: {\n              content: \"Entschuldigung, die hochgeladenen Dateien sind zu gro\u00DF f\u00FCr die Verarbeitung. Bitte verwende kleinere Dateien oder teile sie in mehrere kleinere Dateien auf.\"\n            }\n          }]\n        }), {\n          status: 200, // Return 200 so frontend handles it normally\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"Access-Control-Allow-Origin\": \"*\",\n          },\n        });\n      }\n      \n      throw new Error(`OpenAI API Error: ${apiResponse.status} - ${errorText}`);\n    }\n\n    const data = await apiResponse.json();\n    console.log(\"OpenAI Response received successfully\");\n    \n    // Get the AI response content\n    const botAnswer = data.choices?.[0]?.message?.content || \"Entschuldigung, ich konnte keine Antwort generieren.\";\n    \n    // Log if the response mentions files\n    console.log(\"Response mentions files:\", botAnswer.toLowerCase().includes(\"datei\"));\n\n    // \u2705 Save to Airtable with both prompt, bot answer, and file attachments\n    try {\n      await saveToAirtable(env, message, botAnswer, files);\n      console.log(\"Successfully saved to Airtable with bot answer and file attachments\");\n    } catch (airtableError) {\n      console.error(\"Airtable save failed:\", airtableError);\n      // Continue with AI response even if Airtable fails\n    }\n\n    return new Response(JSON.stringify(data), {\n      status: 200,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Origin\": \"*\",\n      },\n    });\n  } catch (error) {\n    console.error(\"Error in AI function:\", error);\n    return new Response(JSON.stringify({ \n      error: error.message,\n      choices: [{\n        message: {\n          content: \"Entschuldigung, es gab einen technischen Fehler. Bitte versuche es erneut.\"\n        }\n      }]\n    }), {\n      status: 500,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Origin\": \"*\",\n      },\n    });\n  }\n}\n\n// \u2705 Function to convert file content to base64 data URL for Airtable\nfunction createFileDataURL(fileName, content) {\n  // Convert text content to base64\n  const base64Content = btoa(unescape(encodeURIComponent(content)));\n  \n  // Create data URL with proper MIME type for text files\n  return `data:text/plain;base64,${base64Content}`;\n}\n\n// \u2705 Enhanced Airtable Integration Function with Bot Answer and File Attachments\nasync function saveToAirtable(env, originalMessage, botAnswer, files) {\n  const AIRTABLE_API_KEY = env.AIRTABLE_API_KEY;\n  const AIRTABLE_BASE_ID = env.AIRTABLE_BASE_ID;\n  const AIRTABLE_TABLE_NAME = env.AIRTABLE_TABLE_NAME || \"Prompts\";\n\n  if (!AIRTABLE_API_KEY || !AIRTABLE_BASE_ID) {\n    throw new Error(\"Missing Airtable credentials\");\n  }\n\n  // Extract just the user's original prompt (without file content)\n  let userPrompt = originalMessage;\n  \n  // If message contains file context, extract only the original prompt\n  if (originalMessage.includes(\"[Uploaded Files Context:]\")) {\n    userPrompt = originalMessage.split(\"\\n\\n[Uploaded Files Context:]\")[0];\n  }\n\n  // Clean up bot answer - remove any potential formatting issues\n  const cleanBotAnswer = botAnswer.replace(/\\n\\s*\\n/g, '\\n').trim();\n\n  // \u2705 Prepare file attachments for Airtable\n  const fileAttachments = files.map(file => ({\n    url: createFileDataURL(file.name, file.content),\n    filename: file.name,\n    type: \"text/plain\"\n  }));\n\n  console.log(\"Preparing file attachments:\", fileAttachments.length);\n\n  const airtableUrl = `https://api.airtable.com/v0/${AIRTABLE_BASE_ID}/${AIRTABLE_TABLE_NAME}`;\n  \n  const recordData = {\n    records: [\n      {\n        fields: {\n          \"Prompt\": userPrompt,\n          \"Bot_Answer\": cleanBotAnswer,\n          \"Timestamp\": new Date().toISOString(),\n          \"File_Count\": files.length,\n          // Add file attachments if any exist\n          ...(fileAttachments.length > 0 && {\n            \"File_Attachments\": fileAttachments\n          })\n        }\n      }\n    ]\n  };\n\n  console.log(\"Saving to Airtable:\", {\n    url: airtableUrl,\n    promptLength: userPrompt.length,\n    botAnswerLength: cleanBotAnswer.length,\n    hasFiles: files.length > 0,\n    fileAttachments: fileAttachments.length\n  });\n\n  const response = await fetch(airtableUrl, {\n    method: \"POST\",\n    headers: {\n      \"Authorization\": `Bearer ${AIRTABLE_API_KEY}`,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(recordData),\n  });\n\n  if (!response.ok) {\n    const errorText = await response.text();\n    console.error(\"Airtable API Error:\", response.status, errorText);\n    \n    // If file upload fails, try saving without attachments\n    if (response.status === 422 && files.length > 0) {\n      console.log(\"Retrying without file attachments...\");\n      const fallbackData = {\n        records: [\n          {\n            fields: {\n              \"Prompt\": userPrompt,\n              \"Bot_Answer\": cleanBotAnswer,\n              \"Timestamp\": new Date().toISOString(),\n              \"File_Count\": files.length,\n              // Add file names as text instead of attachments\n              \"File_Names\": files.map(f => f.name).join(\", \")\n            }\n          }\n        ]\n      };\n      \n      const fallbackResponse = await fetch(airtableUrl, {\n        method: \"POST\",\n        headers: {\n          \"Authorization\": `Bearer ${AIRTABLE_API_KEY}`,\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(fallbackData),\n      });\n      \n      if (fallbackResponse.ok) {\n        const fallbackResult = await fallbackResponse.json();\n        console.log(\"Airtable save successful (without file attachments):\", fallbackResult);\n        return fallbackResult;\n      }\n    }\n    \n    throw new Error(`Airtable API Error: ${response.status} - ${errorText}`);\n  }\n\n  const result = await response.json();\n  console.log(\"Airtable save successful:\", result);\n  return result;\n}\n\n// \u2705 Alternative function for uploading files via URL (if you have a file hosting service)\nasync function saveToAirtableWithFileURLs(env, originalMessage, botAnswer, files, fileUrls = []) {\n  const AIRTABLE_API_KEY = env.AIRTABLE_API_KEY;\n  const AIRTABLE_BASE_ID = env.AIRTABLE_BASE_ID;\n  const AIRTABLE_TABLE_NAME = env.AIRTABLE_TABLE_NAME || \"Prompts\";\n\n  if (!AIRTABLE_API_KEY || !AIRTABLE_BASE_ID) {\n    throw new Error(\"Missing Airtable credentials\");\n  }\n\n  // Extract just the user's original prompt (without file content)\n  let userPrompt = originalMessage;\n  \n  if (originalMessage.includes(\"[Uploaded Files Context:]\")) {\n    userPrompt = originalMessage.split(\"\\n\\n[Uploaded Files Context:]\")[0];\n  }\n\n  const cleanBotAnswer = botAnswer.replace(/\\n\\s*\\n/g, '\\n').trim();\n\n  // Prepare file attachments using external URLs\n  const fileAttachments = fileUrls.map((url, index) => ({\n    url: url,\n    filename: files[index]?.name || `file_${index + 1}.txt`,\n    type: \"text/plain\"\n  }));\n\n  const airtableUrl = `https://api.airtable.com/v0/${AIRTABLE_BASE_ID}/${AIRTABLE_TABLE_NAME}`;\n  \n  const recordData = {\n    records: [\n      {\n        fields: {\n          \"Prompt\": userPrompt,\n          \"Bot_Answer\": cleanBotAnswer,\n          \"Timestamp\": new Date().toISOString(),\n          \"File_Count\": files.length,\n          ...(fileAttachments.length > 0 && {\n            \"File_Attachments\": fileAttachments\n          })\n        }\n      }\n    ]\n  };\n\n  const response = await fetch(airtableUrl, {\n    method: \"POST\",\n    headers: {\n      \"Authorization\": `Bearer ${AIRTABLE_API_KEY}`,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(recordData),\n  });\n\n  if (!response.ok) {\n    const errorText = await response.text();\n    console.error(\"Airtable API Error:\", response.status, errorText);\n    throw new Error(`Airtable API Error: ${response.status} - ${errorText}`);\n  }\n\n  const result = await response.json();\n  console.log(\"Airtable save successful with file URLs:\", result);\n  return result;\n}\n\n// \u2705 Optional: Function to update an existing record\nasync function updateAirtableRecord(env, recordId, botAnswer, files = []) {\n  const AIRTABLE_API_KEY = env.AIRTABLE_API_KEY;\n  const AIRTABLE_BASE_ID = env.AIRTABLE_BASE_ID;\n  const AIRTABLE_TABLE_NAME = env.AIRTABLE_TABLE_NAME || \"Prompts\";\n\n  if (!AIRTABLE_API_KEY || !AIRTABLE_BASE_ID) {\n    throw new Error(\"Missing Airtable credentials\");\n  }\n\n  const airtableUrl = `https://api.airtable.com/v0/${AIRTABLE_BASE_ID}/${AIRTABLE_TABLE_NAME}/${recordId}`;\n  \n  const updateData = {\n    fields: {\n      \"Bot_Answer\": botAnswer,\n      \"Response_Length\": botAnswer.length,\n      \"Updated_At\": new Date().toISOString()\n    }\n  };\n\n  // Add file attachments if provided\n  if (files.length > 0) {\n    const fileAttachments = files.map(file => ({\n      url: createFileDataURL(file.name, file.content),\n      filename: file.name,\n      type: \"text/plain\"\n    }));\n    \n    updateData.fields[\"File_Attachments\"] = fileAttachments;\n    updateData.fields[\"File_Count\"] = files.length;\n  }\n\n  const response = await fetch(airtableUrl, {\n    method: \"PATCH\",\n    headers: {\n      \"Authorization\": `Bearer ${AIRTABLE_API_KEY}`,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(updateData),\n  });\n\n  if (!response.ok) {\n    const errorText = await response.text();\n    console.error(\"Airtable Update Error:\", response.status, errorText);\n    throw new Error(`Airtable Update Error: ${response.status} - ${errorText}`);\n  }\n\n  const result = await response.json();\n  console.log(\"Airtable update successful:\", result);\n  return result;\n}\n\n// \u2705 Optional: Function to retrieve chat history from Airtable\nasync function getChatHistory(env, maxRecords = 100) {\n  const AIRTABLE_API_KEY = env.AIRTABLE_API_KEY;\n  const AIRTABLE_BASE_ID = env.AIRTABLE_BASE_ID;\n  const AIRTABLE_TABLE_NAME = env.AIRTABLE_TABLE_NAME || \"Prompts\";\n\n  if (!AIRTABLE_API_KEY || !AIRTABLE_BASE_ID) {\n    throw new Error(\"Missing Airtable credentials\");\n  }\n\n  const airtableUrl = `https://api.airtable.com/v0/${AIRTABLE_BASE_ID}/${AIRTABLE_TABLE_NAME}`;\n  \n  const params = new URLSearchParams({\n    maxRecords: maxRecords.toString(),\n    sort: JSON.stringify([{ field: \"Timestamp\", direction: \"desc\" }]),\n  });\n\n  const response = await fetch(`${airtableUrl}?${params}`, {\n    method: \"GET\",\n    headers: {\n      \"Authorization\": `Bearer ${AIRTABLE_API_KEY}`,\n      \"Content-Type\": \"application/json\",\n    },\n  });\n\n  if (!response.ok) {\n    const errorText = await response.text();\n    console.error(\"Airtable Fetch Error:\", response.status, errorText);\n    throw new Error(`Airtable Fetch Error: ${response.status} - ${errorText}`);\n  }\n\n  const result = await response.json();\n  console.log(`Retrieved ${result.records.length} records from Airtable`);\n  \n  // Format the records for easier use\n  const formattedRecords = result.records.map(record => ({\n    id: record.id,\n    prompt: record.fields.Prompt,\n    botAnswer: record.fields['Bot_Answer'],\n    timestamp: record.fields.Timestamp,\n    fileCount: record.fields.File_Count || 0,\n    fileAttachments: record.fields.File_Attachments || [],\n    fileNames: record.fields.File_Names || \"\",\n    createdTime: record.createdTime\n  }));\n  \n  return formattedRecords;\n}", "// functions/ai-airtable.js\r\n\r\nexport async function onRequest(context) {\r\n  const { request, env } = context;\r\n  \r\n  console.log(\"=== AI Function Called ===\");\r\n  console.log(\"Method:\", request.method);\r\n  \r\n  // \u2705 CORS Preflight Handling\r\n  if (request.method === \"OPTIONS\") {\r\n    return new Response(null, {\r\n      status: 204,\r\n      headers: {\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n        \"Access-Control-Allow-Methods\": \"GET, POST, OPTIONS\",\r\n        \"Access-Control-Allow-Headers\": \"Content-Type\",\r\n      },\r\n    });\r\n  }\r\n\r\n  // \u2705 Only accept POST\r\n  if (request.method !== \"POST\") {\r\n    return new Response(JSON.stringify({ error: `Method ${request.method} not allowed` }), { \r\n      status: 405,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n      }\r\n    });\r\n  }\r\n\r\n  try {\r\n    const body = await request.text();\r\n    console.log(\"Raw request body length:\", body.length);\r\n    \r\n    if (!body) {\r\n      return new Response(\r\n        JSON.stringify({ error: \"Empty request body\" }),\r\n        {\r\n          status: 400,\r\n          headers: { \r\n            \"Content-Type\": \"application/json\",\r\n            \"Access-Control-Allow-Origin\": \"*\"\r\n          },\r\n        }\r\n      );\r\n    }\r\n    \r\n    let parsedBody;\r\n    try {\r\n      parsedBody = JSON.parse(body);\r\n    } catch (e) {\r\n      console.error(\"JSON Parse Error:\", e);\r\n      return new Response(\r\n        JSON.stringify({ error: \"Invalid JSON in request body\" }),\r\n        {\r\n          status: 400,\r\n          headers: { \r\n            \"Content-Type\": \"application/json\",\r\n            \"Access-Control-Allow-Origin\": \"*\"\r\n          },\r\n        }\r\n      );\r\n    }\r\n\r\n    console.log(\"Request contains files:\", parsedBody.files?.length || 0);\r\n    console.log(\"Message length:\", parsedBody.message?.length || 0);\r\n    \r\n    const { message, messages = [], files = [] } = parsedBody;\r\n\r\n    if (!message) {\r\n      return new Response(\r\n        JSON.stringify({ error: \"Missing 'message' field\" }),\r\n        {\r\n          status: 400,\r\n          headers: { \r\n            \"Content-Type\": \"application/json\",\r\n            \"Access-Control-Allow-Origin\": \"*\"\r\n          },\r\n        }\r\n      );\r\n    }\r\n\r\n    // \u2705 Enhanced system prompt for file handling\r\n    let systemPrompt = \"Du bist ein hilfsreicher AI-Assistent. Antworte h\u00F6flich und informativ auf Deutsch.\";\r\n    \r\n    if (files.length > 0) {\r\n      systemPrompt += ` \r\n      \r\nWICHTIG: Der Benutzer hat ${files.length} Textdatei(en) hochgeladen. Diese Dateien sind im Nachrichteninhalt unter \"[Uploaded Files Context:]\" zu finden. \r\n- Lies und analysiere den Inhalt dieser Dateien sorgf\u00E4ltig\r\n- Beziehe dich direkt auf den Dateiinhalt in deinen Antworten\r\n- Wenn der Benutzer Fragen zu den Dateien stellt, zitiere relevante Teile daraus\r\n- Best\u00E4tige explizit, dass du die Dateien gelesen hast`;\r\n    }\r\n\r\n    // \u2705 Prepare messages for OpenAI Chat API\r\n    const chatMessages = [\r\n      {\r\n        role: \"system\",\r\n        content: systemPrompt\r\n      }\r\n    ];\r\n\r\n    // Add conversation history (excluding the current message to avoid duplication)\r\n    if (messages.length > 0) {\r\n      // Only add messages that aren't the current one\r\n      const historyMessages = messages.slice(0, -1).map(msg => ({\r\n        role: msg.role,\r\n        content: msg.content\r\n      }));\r\n      chatMessages.push(...historyMessages);\r\n    }\r\n\r\n    // Add the current message (which includes file content)\r\n    chatMessages.push({\r\n      role: \"user\",\r\n      content: message\r\n    });\r\n\r\n    console.log(\"=== DEBUG: Final message to OpenAI ===\");\r\n    console.log(\"System prompt:\", systemPrompt);\r\n    console.log(\"Total messages:\", chatMessages.length);\r\n    console.log(\"Current message preview:\", message.substring(0, 500) + \"...\");\r\n    console.log(\"=====================================\");\r\n\r\n    // \u2705 Send request to OpenAI Chat API with increased max_tokens for file responses\r\n    const apiResponse = await fetch(\"https://api.openai.com/v1/chat/completions\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Authorization\": `Bearer ${env.VITE_APP_OPENAI_API_KEY}`,\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        model: \"gpt-3.5-turbo\",\r\n        messages: chatMessages,\r\n        max_tokens: files.length > 0 ? 2000 : 1000, // More tokens when files are involved\r\n        temperature: 0.7,\r\n      }),\r\n    });\r\n\r\n    if (!apiResponse.ok) {\r\n      const errorText = await apiResponse.text();\r\n      console.error(\"OpenAI API Error:\", apiResponse.status, errorText);\r\n      \r\n      // Check for context length error\r\n      if (errorText.includes(\"context_length_exceeded\")) {\r\n        return new Response(JSON.stringify({ \r\n          error: \"Die hochgeladenen Dateien sind zu gro\u00DF. Bitte verwende kleinere Dateien oder teile sie auf.\",\r\n          choices: [{\r\n            message: {\r\n              content: \"Entschuldigung, die hochgeladenen Dateien sind zu gro\u00DF f\u00FCr die Verarbeitung. Bitte verwende kleinere Dateien oder teile sie in mehrere kleinere Dateien auf.\"\r\n            }\r\n          }]\r\n        }), {\r\n          status: 200, // Return 200 so frontend handles it normally\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"Access-Control-Allow-Origin\": \"*\",\r\n          },\r\n        });\r\n      }\r\n      \r\n      throw new Error(`OpenAI API Error: ${apiResponse.status} - ${errorText}`);\r\n    }\r\n\r\n    const data = await apiResponse.json();\r\n    console.log(\"OpenAI Response received successfully\");\r\n    \r\n    // Get the AI response content\r\n    const botAnswer = data.choices?.[0]?.message?.content || \"Entschuldigung, ich konnte keine Antwort generieren.\";\r\n    \r\n    // Log if the response mentions files\r\n    console.log(\"Response mentions files:\", botAnswer.toLowerCase().includes(\"datei\"));\r\n\r\n    // \u2705 Save to Airtable with both prompt and bot answer\r\n    try {\r\n      await saveToAirtable(env, message, botAnswer, files);\r\n      console.log(\"Successfully saved to Airtable with bot answer\");\r\n    } catch (airtableError) {\r\n      console.error(\"Airtable save failed:\", airtableError);\r\n      // Continue with AI response even if Airtable fails\r\n    }\r\n\r\n    return new Response(JSON.stringify(data), {\r\n      status: 200,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n      },\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error in AI function:\", error);\r\n    return new Response(JSON.stringify({ \r\n      error: error.message,\r\n      choices: [{\r\n        message: {\r\n          content: \"Entschuldigung, es gab einen technischen Fehler. Bitte versuche es erneut.\"\r\n        }\r\n      }]\r\n    }), {\r\n      status: 500,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\n// \u2705 Enhanced Airtable Integration Function with Bot Answer\r\nasync function saveToAirtable(env, originalMessage, botAnswer, files) {\r\n  const AIRTABLE_API_KEY = env.AIRTABLE_API_KEY;\r\n  const AIRTABLE_BASE_ID = env.AIRTABLE_BASE_ID;\r\n  const AIRTABLE_TABLE_NAME = env.AIRTABLE_TABLE_NAME || \"Prompts\";\r\n\r\n  if (!AIRTABLE_API_KEY || !AIRTABLE_BASE_ID) {\r\n    throw new Error(\"Missing Airtable credentials\");\r\n  }\r\n\r\n  // Extract just the user's original prompt (without file content)\r\n  let userPrompt = originalMessage;\r\n  \r\n  // If message contains file context, extract only the original prompt\r\n  if (originalMessage.includes(\"[Uploaded Files Context:]\")) {\r\n    userPrompt = originalMessage.split(\"\\n\\n[Uploaded Files Context:]\")[0];\r\n  }\r\n\r\n  // Clean up bot answer - remove any potential formatting issues\r\n  const cleanBotAnswer = botAnswer.replace(/\\n\\s*\\n/g, '\\n').trim();\r\n\r\n  const airtableUrl = `https://api.airtable.com/v0/${AIRTABLE_BASE_ID}/${AIRTABLE_TABLE_NAME}`;\r\n  \r\n  const recordData = {\r\n    records: [\r\n      {\r\n        fields: {\r\n          \"Prompt\": userPrompt,\r\n          \"Bot_Answer\": cleanBotAnswer,\r\n          \"Timestamp\": new Date().toISOString(),\r\n          // Optional: Add metadata fields\r\n      //    \"Has_Files\": files.length > 0,\r\n          \"File_Count\": files.length,\r\n       //   \"Response_Length\": cleanBotAnswer.length,\r\n       //   \"Prompt_Length\": userPrompt.length\r\n        }\r\n      }\r\n    ]\r\n  };\r\n\r\n  console.log(\"Saving to Airtable:\", {\r\n    url: airtableUrl,\r\n    promptLength: userPrompt.length,\r\n    botAnswerLength: cleanBotAnswer.length,\r\n    hasFiles: files.length > 0\r\n  });\r\n\r\n  const response = await fetch(airtableUrl, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Authorization\": `Bearer ${AIRTABLE_API_KEY}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify(recordData),\r\n  });\r\n\r\n  if (!response.ok) {\r\n    const errorText = await response.text();\r\n    console.error(\"Airtable API Error:\", response.status, errorText);\r\n    throw new Error(`Airtable API Error: ${response.status} - ${errorText}`);\r\n  }\r\n\r\n  const result = await response.json();\r\n  console.log(\"Airtable save successful:\", result);\r\n  return result;\r\n}\r\n\r\n// \u2705 Optional: Function to update an existing record with bot answer\r\nasync function updateAirtableRecord(env, recordId, botAnswer) {\r\n  const AIRTABLE_API_KEY = env.AIRTABLE_API_KEY;\r\n  const AIRTABLE_BASE_ID = env.AIRTABLE_BASE_ID;\r\n  const AIRTABLE_TABLE_NAME = env.AIRTABLE_TABLE_NAME || \"Prompts\";\r\n\r\n  if (!AIRTABLE_API_KEY || !AIRTABLE_BASE_ID) {\r\n    throw new Error(\"Missing Airtable credentials\");\r\n  }\r\n\r\n  const airtableUrl = `https://api.airtable.com/v0/${AIRTABLE_BASE_ID}/${AIRTABLE_TABLE_NAME}/${recordId}`;\r\n  \r\n  const updateData = {\r\n    fields: {\r\n      \"Bot Answer\": botAnswer,\r\n      \"Response_Length\": botAnswer.length,\r\n      \"Updated_At\": new Date().toISOString()\r\n    }\r\n  };\r\n\r\n  const response = await fetch(airtableUrl, {\r\n    method: \"PATCH\",\r\n    headers: {\r\n      \"Authorization\": `Bearer ${AIRTABLE_API_KEY}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify(updateData),\r\n  });\r\n\r\n  if (!response.ok) {\r\n    const errorText = await response.text();\r\n    console.error(\"Airtable Update Error:\", response.status, errorText);\r\n    throw new Error(`Airtable Update Error: ${response.status} - ${errorText}`);\r\n  }\r\n\r\n  const result = await response.json();\r\n  console.log(\"Airtable update successful:\", result);\r\n  return result;\r\n}\r\n\r\n// \u2705 Optional: Function to retrieve chat history from Airtable\r\nasync function getChatHistory(env, maxRecords = 100) {\r\n  const AIRTABLE_API_KEY = env.AIRTABLE_API_KEY;\r\n  const AIRTABLE_BASE_ID = env.AIRTABLE_BASE_ID;\r\n  const AIRTABLE_TABLE_NAME = env.AIRTABLE_TABLE_NAME || \"Prompts\";\r\n\r\n  if (!AIRTABLE_API_KEY || !AIRTABLE_BASE_ID) {\r\n    throw new Error(\"Missing Airtable credentials\");\r\n  }\r\n\r\n  const airtableUrl = `https://api.airtable.com/v0/${AIRTABLE_BASE_ID}/${AIRTABLE_TABLE_NAME}`;\r\n  \r\n  const params = new URLSearchParams({\r\n    maxRecords: maxRecords.toString(),\r\n    sort: JSON.stringify([{ field: \"Timestamp\", direction: \"desc\" }]),\r\n  });\r\n\r\n  const response = await fetch(`${airtableUrl}?${params}`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      \"Authorization\": `Bearer ${AIRTABLE_API_KEY}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n\r\n  if (!response.ok) {\r\n    const errorText = await response.text();\r\n    console.error(\"Airtable Fetch Error:\", response.status, errorText);\r\n    throw new Error(`Airtable Fetch Error: ${response.status} - ${errorText}`);\r\n  }\r\n\r\n  const result = await response.json();\r\n  console.log(`Retrieved ${result.records.length} records from Airtable`);\r\n  \r\n  // Format the records for easier use\r\n  const formattedRecords = result.records.map(record => ({\r\n    id: record.id,\r\n    prompt: record.fields.Prompt,\r\n    botAnswer: record.fields['Bot Answer'],\r\n    timestamp: record.fields.Timestamp,\r\n    hasFiles: record.fields.Has_Files || false,\r\n    fileCount: record.fields.File_Count || 0,\r\n    createdTime: record.createdTime\r\n  }));\r\n  \r\n  return formattedRecords;\r\n}", "// functions/ai-airtable.js\n// prompt, TC, Filenumber\n// ohne botanswer\n\nexport async function onRequest(context) {\n  const { request, env } = context;\n  \n  console.log(\"=== AI Function Called ===\");\n  console.log(\"Method:\", request.method);\n  \n  // \u2705 CORS Preflight Handling\n  if (request.method === \"OPTIONS\") {\n    return new Response(null, {\n      status: 204,\n      headers: {\n        \"Access-Control-Allow-Origin\": \"*\",\n        \"Access-Control-Allow-Methods\": \"GET, POST, OPTIONS\",\n        \"Access-Control-Allow-Headers\": \"Content-Type\",\n      },\n    });\n  }\n\n  // \u2705 Only accept POST\n  if (request.method !== \"POST\") {\n    return new Response(JSON.stringify({ error: `Method ${request.method} not allowed` }), { \n      status: 405,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Origin\": \"*\",\n      }\n    });\n  }\n\n  try {\n    const body = await request.text();\n    console.log(\"Raw request body length:\", body.length);\n    \n    if (!body) {\n      return new Response(\n        JSON.stringify({ error: \"Empty request body\" }),\n        {\n          status: 400,\n          headers: { \n            \"Content-Type\": \"application/json\",\n            \"Access-Control-Allow-Origin\": \"*\"\n          },\n        }\n      );\n    }\n    \n    let parsedBody;\n    try {\n      parsedBody = JSON.parse(body);\n    } catch (e) {\n      console.error(\"JSON Parse Error:\", e);\n      return new Response(\n        JSON.stringify({ error: \"Invalid JSON in request body\" }),\n        {\n          status: 400,\n          headers: { \n            \"Content-Type\": \"application/json\",\n            \"Access-Control-Allow-Origin\": \"*\"\n          },\n        }\n      );\n    }\n\n    console.log(\"Request contains files:\", parsedBody.files?.length || 0);\n    console.log(\"Message length:\", parsedBody.message?.length || 0);\n    \n    const { message, messages = [], files = [] } = parsedBody;\n\n    if (!message) {\n      return new Response(\n        JSON.stringify({ error: \"Missing 'message' field\" }),\n        {\n          status: 400,\n          headers: { \n            \"Content-Type\": \"application/json\",\n            \"Access-Control-Allow-Origin\": \"*\"\n          },\n        }\n      );\n    }\n\n    // \u2705 Save to Airtable (only save user prompts, not file content)\n    try {\n      await saveToAirtable(env, message, files);\n      console.log(\"Successfully saved to Airtable\");\n    } catch (airtableError) {\n      console.error(\"Airtable save failed:\", airtableError);\n      // Continue with AI response even if Airtable fails\n    }\n\n    // \u2705 Enhanced system prompt for file handling\n    let systemPrompt = \"Du bist ein hilfsreicher AI-Assistent. Antworte h\u00F6flich und informativ auf Deutsch.\";\n    \n    if (files.length > 0) {\n      systemPrompt += ` \n      \nWICHTIG: Der Benutzer hat ${files.length} Textdatei(en) hochgeladen. Diese Dateien sind im Nachrichteninhalt unter \"[Uploaded Files Context:]\" zu finden. \n- Lies und analysiere den Inhalt dieser Dateien sorgf\u00E4ltig\n- Beziehe dich direkt auf den Dateiinhalt in deinen Antworten\n- Wenn der Benutzer Fragen zu den Dateien stellt, zitiere relevante Teile daraus\n- Best\u00E4tige explizit, dass du die Dateien gelesen hast`;\n    }\n\n    // \u2705 Prepare messages for OpenAI Chat API\n    const chatMessages = [\n      {\n        role: \"system\",\n        content: systemPrompt\n      }\n    ];\n\n    // Add conversation history (excluding the current message to avoid duplication)\n    if (messages.length > 0) {\n      // Only add messages that aren't the current one\n      const historyMessages = messages.slice(0, -1).map(msg => ({\n        role: msg.role,\n        content: msg.content\n      }));\n      chatMessages.push(...historyMessages);\n    }\n\n    // Add the current message (which includes file content)\n    chatMessages.push({\n      role: \"user\",\n      content: message\n    });\n\n    console.log(\"=== DEBUG: Final message to OpenAI ===\");\n    console.log(\"System prompt:\", systemPrompt);\n    console.log(\"Total messages:\", chatMessages.length);\n    console.log(\"Current message preview:\", message.substring(0, 500) + \"...\");\n    console.log(\"=====================================\");\n\n    // \u2705 Send request to OpenAI Chat API with increased max_tokens for file responses\n    const apiResponse = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n      method: \"POST\",\n      headers: {\n        \"Authorization\": `Bearer ${env.VITE_APP_OPENAI_API_KEY}`,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        model: \"gpt-3.5-turbo\",\n        messages: chatMessages,\n        max_tokens: files.length > 0 ? 2000 : 1000, // More tokens when files are involved\n        temperature: 0.7,\n      }),\n    });\n\n    if (!apiResponse.ok) {\n      const errorText = await apiResponse.text();\n      console.error(\"OpenAI API Error:\", apiResponse.status, errorText);\n      \n      // Check for context length error\n      if (errorText.includes(\"context_length_exceeded\")) {\n        return new Response(JSON.stringify({ \n          error: \"Die hochgeladenen Dateien sind zu gro\u00DF. Bitte verwende kleinere Dateien oder teile sie auf.\",\n          choices: [{\n            message: {\n              content: \"Entschuldigung, die hochgeladenen Dateien sind zu gro\u00DF f\u00FCr die Verarbeitung. Bitte verwende kleinere Dateien oder teile sie in mehrere kleinere Dateien auf.\"\n            }\n          }]\n        }), {\n          status: 200, // Return 200 so frontend handles it normally\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"Access-Control-Allow-Origin\": \"*\",\n          },\n        });\n      }\n      \n      throw new Error(`OpenAI API Error: ${apiResponse.status} - ${errorText}`);\n    }\n\n    const data = await apiResponse.json();\n    console.log(\"OpenAI Response received successfully\");\n    \n    // Log if the response mentions files\n    const responseContent = data.choices?.[0]?.message?.content || \"\";\n    console.log(\"Response mentions files:\", responseContent.toLowerCase().includes(\"datei\"));\n\n    return new Response(JSON.stringify(data), {\n      status: 200,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Origin\": \"*\",\n      },\n    });\n  } catch (error) {\n    console.error(\"Error in AI function:\", error);\n    return new Response(JSON.stringify({ \n      error: error.message,\n      choices: [{\n        message: {\n          content: \"Entschuldigung, es gab einen technischen Fehler. Bitte versuche es erneut.\"\n        }\n      }]\n    }), {\n      status: 500,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Origin\": \"*\",\n      },\n    });\n  }\n}\n\n// \u2705 Airtable Integration Function\nasync function saveToAirtable(env, originalMessage, files) {\n  const AIRTABLE_API_KEY = env.AIRTABLE_API_KEY;\n  const AIRTABLE_BASE_ID = env.AIRTABLE_BASE_ID;\n  const AIRTABLE_TABLE_NAME = env.AIRTABLE_TABLE_NAME || \"Prompts\";\n\n  if (!AIRTABLE_API_KEY || !AIRTABLE_BASE_ID) {\n    throw new Error(\"Missing Airtable credentials\");\n  }\n\n  // Extract just the user's original prompt (without file content)\n  let userPrompt = originalMessage;\n  \n  // If message contains file context, extract only the original prompt\n  if (originalMessage.includes(\"[Uploaded Files Context:]\")) {\n    userPrompt = originalMessage.split(\"\\n\\n[Uploaded Files Context:]\")[0];\n  }\n\n  const airtableUrl = `https://api.airtable.com/v0/${AIRTABLE_BASE_ID}/${AIRTABLE_TABLE_NAME}`;\n  \n  const recordData = {\n    records: [\n      {\n        fields: {\n          \"Prompt\": userPrompt,\n          \n         \"Timestamp\": new Date().toISOString(),\n       //   \"Has_Files\": files.length > 0,\n        \"File_Count\": files.length\n        }\n      }\n    ]\n  };\n\n  console.log(\"Saving to Airtable:\", {\n    url: airtableUrl,\n    promptLength: userPrompt.length,\n    hasFiles: files.length > 0\n  });\n\n  const response = await fetch(airtableUrl, {\n    method: \"POST\",\n    headers: {\n      \"Authorization\": `Bearer ${AIRTABLE_API_KEY}`,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(recordData),\n  });\n\n  if (!response.ok) {\n    const errorText = await response.text();\n    console.error(\"Airtable API Error:\", response.status, errorText);\n    throw new Error(`Airtable API Error: ${response.status} - ${errorText}`);\n  }\n\n  const result = await response.json();\n  console.log(\"Airtable save successful:\", result);\n  return result;\n}", "import { onRequest as __ai_airtable_js_onRequest } from \"D:\\\\Documents\\\\CODING\\\\JAVASCRIPT\\\\react-chatbot-airtable\\\\functions\\\\ai-airtable.js\"\nimport { onRequest as __ai_airtable_mitbotanswer_js_onRequest } from \"D:\\\\Documents\\\\CODING\\\\JAVASCRIPT\\\\react-chatbot-airtable\\\\functions\\\\ai-airtable-mitbotanswer.js\"\nimport { onRequest as __ai_airtable_start_js_onRequest } from \"D:\\\\Documents\\\\CODING\\\\JAVASCRIPT\\\\react-chatbot-airtable\\\\functions\\\\ai-airtable-start.js\"\n\nexport const routes = [\n    {\n      routePath: \"/ai-airtable\",\n      mountPath: \"/\",\n      method: \"\",\n      middlewares: [],\n      modules: [__ai_airtable_js_onRequest],\n    },\n  {\n      routePath: \"/ai-airtable-mitbotanswer\",\n      mountPath: \"/\",\n      method: \"\",\n      middlewares: [],\n      modules: [__ai_airtable_mitbotanswer_js_onRequest],\n    },\n  {\n      routePath: \"/ai-airtable-start\",\n      mountPath: \"/\",\n      method: \"\",\n      middlewares: [],\n      modules: [__ai_airtable_start_js_onRequest],\n    },\n  ]", "/**\n * Tokenizer results.\n */\ninterface LexToken {\n  type:\n    | \"OPEN\"\n    | \"CLOSE\"\n    | \"PATTERN\"\n    | \"NAME\"\n    | \"CHAR\"\n    | \"ESCAPED_CHAR\"\n    | \"MODIFIER\"\n    | \"END\";\n  index: number;\n  value: string;\n}\n\n/**\n * Tokenize input string.\n */\nfunction lexer(str: string): LexToken[] {\n  const tokens: LexToken[] = [];\n  let i = 0;\n\n  while (i < str.length) {\n    const char = str[i];\n\n    if (char === \"*\" || char === \"+\" || char === \"?\") {\n      tokens.push({ type: \"MODIFIER\", index: i, value: str[i++] });\n      continue;\n    }\n\n    if (char === \"\\\\\") {\n      tokens.push({ type: \"ESCAPED_CHAR\", index: i++, value: str[i++] });\n      continue;\n    }\n\n    if (char === \"{\") {\n      tokens.push({ type: \"OPEN\", index: i, value: str[i++] });\n      continue;\n    }\n\n    if (char === \"}\") {\n      tokens.push({ type: \"CLOSE\", index: i, value: str[i++] });\n      continue;\n    }\n\n    if (char === \":\") {\n      let name = \"\";\n      let j = i + 1;\n\n      while (j < str.length) {\n        const code = str.charCodeAt(j);\n\n        if (\n          // `0-9`\n          (code >= 48 && code <= 57) ||\n          // `A-Z`\n          (code >= 65 && code <= 90) ||\n          // `a-z`\n          (code >= 97 && code <= 122) ||\n          // `_`\n          code === 95\n        ) {\n          name += str[j++];\n          continue;\n        }\n\n        break;\n      }\n\n      if (!name) throw new TypeError(`Missing parameter name at ${i}`);\n\n      tokens.push({ type: \"NAME\", index: i, value: name });\n      i = j;\n      continue;\n    }\n\n    if (char === \"(\") {\n      let count = 1;\n      let pattern = \"\";\n      let j = i + 1;\n\n      if (str[j] === \"?\") {\n        throw new TypeError(`Pattern cannot start with \"?\" at ${j}`);\n      }\n\n      while (j < str.length) {\n        if (str[j] === \"\\\\\") {\n          pattern += str[j++] + str[j++];\n          continue;\n        }\n\n        if (str[j] === \")\") {\n          count--;\n          if (count === 0) {\n            j++;\n            break;\n          }\n        } else if (str[j] === \"(\") {\n          count++;\n          if (str[j + 1] !== \"?\") {\n            throw new TypeError(`Capturing groups are not allowed at ${j}`);\n          }\n        }\n\n        pattern += str[j++];\n      }\n\n      if (count) throw new TypeError(`Unbalanced pattern at ${i}`);\n      if (!pattern) throw new TypeError(`Missing pattern at ${i}`);\n\n      tokens.push({ type: \"PATTERN\", index: i, value: pattern });\n      i = j;\n      continue;\n    }\n\n    tokens.push({ type: \"CHAR\", index: i, value: str[i++] });\n  }\n\n  tokens.push({ type: \"END\", index: i, value: \"\" });\n\n  return tokens;\n}\n\nexport interface ParseOptions {\n  /**\n   * Set the default delimiter for repeat parameters. (default: `'/'`)\n   */\n  delimiter?: string;\n  /**\n   * List of characters to automatically consider prefixes when parsing.\n   */\n  prefixes?: string;\n}\n\n/**\n * Parse a string for the raw tokens.\n */\nexport function parse(str: string, options: ParseOptions = {}): Token[] {\n  const tokens = lexer(str);\n  const { prefixes = \"./\", delimiter = \"/#?\" } = options;\n  const result: Token[] = [];\n  let key = 0;\n  let i = 0;\n  let path = \"\";\n\n  const tryConsume = (type: LexToken[\"type\"]): string | undefined => {\n    if (i < tokens.length && tokens[i].type === type) return tokens[i++].value;\n  };\n\n  const mustConsume = (type: LexToken[\"type\"]): string => {\n    const value = tryConsume(type);\n    if (value !== undefined) return value;\n    const { type: nextType, index } = tokens[i];\n    throw new TypeError(`Unexpected ${nextType} at ${index}, expected ${type}`);\n  };\n\n  const consumeText = (): string => {\n    let result = \"\";\n    let value: string | undefined;\n    while ((value = tryConsume(\"CHAR\") || tryConsume(\"ESCAPED_CHAR\"))) {\n      result += value;\n    }\n    return result;\n  };\n\n  const isSafe = (value: string): boolean => {\n    for (const char of delimiter) if (value.indexOf(char) > -1) return true;\n    return false;\n  };\n\n  const safePattern = (prefix: string) => {\n    const prev = result[result.length - 1];\n    const prevText = prefix || (prev && typeof prev === \"string\" ? prev : \"\");\n\n    if (prev && !prevText) {\n      throw new TypeError(\n        `Must have text between two parameters, missing text after \"${(prev as Key).name}\"`,\n      );\n    }\n\n    if (!prevText || isSafe(prevText)) return `[^${escapeString(delimiter)}]+?`;\n    return `(?:(?!${escapeString(prevText)})[^${escapeString(delimiter)}])+?`;\n  };\n\n  while (i < tokens.length) {\n    const char = tryConsume(\"CHAR\");\n    const name = tryConsume(\"NAME\");\n    const pattern = tryConsume(\"PATTERN\");\n\n    if (name || pattern) {\n      let prefix = char || \"\";\n\n      if (prefixes.indexOf(prefix) === -1) {\n        path += prefix;\n        prefix = \"\";\n      }\n\n      if (path) {\n        result.push(path);\n        path = \"\";\n      }\n\n      result.push({\n        name: name || key++,\n        prefix,\n        suffix: \"\",\n        pattern: pattern || safePattern(prefix),\n        modifier: tryConsume(\"MODIFIER\") || \"\",\n      });\n      continue;\n    }\n\n    const value = char || tryConsume(\"ESCAPED_CHAR\");\n    if (value) {\n      path += value;\n      continue;\n    }\n\n    if (path) {\n      result.push(path);\n      path = \"\";\n    }\n\n    const open = tryConsume(\"OPEN\");\n    if (open) {\n      const prefix = consumeText();\n      const name = tryConsume(\"NAME\") || \"\";\n      const pattern = tryConsume(\"PATTERN\") || \"\";\n      const suffix = consumeText();\n\n      mustConsume(\"CLOSE\");\n\n      result.push({\n        name: name || (pattern ? key++ : \"\"),\n        pattern: name && !pattern ? safePattern(prefix) : pattern,\n        prefix,\n        suffix,\n        modifier: tryConsume(\"MODIFIER\") || \"\",\n      });\n      continue;\n    }\n\n    mustConsume(\"END\");\n  }\n\n  return result;\n}\n\nexport interface TokensToFunctionOptions {\n  /**\n   * When `true` the regexp will be case sensitive. (default: `false`)\n   */\n  sensitive?: boolean;\n  /**\n   * Function for encoding input strings for output.\n   */\n  encode?: (value: string, token: Key) => string;\n  /**\n   * When `false` the function can produce an invalid (unmatched) path. (default: `true`)\n   */\n  validate?: boolean;\n}\n\n/**\n * Compile a string to a template function for the path.\n */\nexport function compile<P extends object = object>(\n  str: string,\n  options?: ParseOptions & TokensToFunctionOptions,\n) {\n  return tokensToFunction<P>(parse(str, options), options);\n}\n\nexport type PathFunction<P extends object = object> = (data?: P) => string;\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nexport function tokensToFunction<P extends object = object>(\n  tokens: Token[],\n  options: TokensToFunctionOptions = {},\n): PathFunction<P> {\n  const reFlags = flags(options);\n  const { encode = (x: string) => x, validate = true } = options;\n\n  // Compile all the tokens into regexps.\n  const matches = tokens.map((token) => {\n    if (typeof token === \"object\") {\n      return new RegExp(`^(?:${token.pattern})$`, reFlags);\n    }\n  });\n\n  return (data: Record<string, any> | null | undefined) => {\n    let path = \"\";\n\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n\n      if (typeof token === \"string\") {\n        path += token;\n        continue;\n      }\n\n      const value = data ? data[token.name] : undefined;\n      const optional = token.modifier === \"?\" || token.modifier === \"*\";\n      const repeat = token.modifier === \"*\" || token.modifier === \"+\";\n\n      if (Array.isArray(value)) {\n        if (!repeat) {\n          throw new TypeError(\n            `Expected \"${token.name}\" to not repeat, but got an array`,\n          );\n        }\n\n        if (value.length === 0) {\n          if (optional) continue;\n\n          throw new TypeError(`Expected \"${token.name}\" to not be empty`);\n        }\n\n        for (let j = 0; j < value.length; j++) {\n          const segment = encode(value[j], token);\n\n          if (validate && !(matches[i] as RegExp).test(segment)) {\n            throw new TypeError(\n              `Expected all \"${token.name}\" to match \"${token.pattern}\", but got \"${segment}\"`,\n            );\n          }\n\n          path += token.prefix + segment + token.suffix;\n        }\n\n        continue;\n      }\n\n      if (typeof value === \"string\" || typeof value === \"number\") {\n        const segment = encode(String(value), token);\n\n        if (validate && !(matches[i] as RegExp).test(segment)) {\n          throw new TypeError(\n            `Expected \"${token.name}\" to match \"${token.pattern}\", but got \"${segment}\"`,\n          );\n        }\n\n        path += token.prefix + segment + token.suffix;\n        continue;\n      }\n\n      if (optional) continue;\n\n      const typeOfMessage = repeat ? \"an array\" : \"a string\";\n      throw new TypeError(`Expected \"${token.name}\" to be ${typeOfMessage}`);\n    }\n\n    return path;\n  };\n}\n\nexport interface RegexpToFunctionOptions {\n  /**\n   * Function for decoding strings for params.\n   */\n  decode?: (value: string, token: Key) => string;\n}\n\n/**\n * A match result contains data about the path match.\n */\nexport interface MatchResult<P extends object = object> {\n  path: string;\n  index: number;\n  params: P;\n}\n\n/**\n * A match is either `false` (no match) or a match result.\n */\nexport type Match<P extends object = object> = false | MatchResult<P>;\n\n/**\n * The match function takes a string and returns whether it matched the path.\n */\nexport type MatchFunction<P extends object = object> = (\n  path: string,\n) => Match<P>;\n\n/**\n * Create path match function from `path-to-regexp` spec.\n */\nexport function match<P extends object = object>(\n  str: Path,\n  options?: ParseOptions & TokensToRegexpOptions & RegexpToFunctionOptions,\n) {\n  const keys: Key[] = [];\n  const re = pathToRegexp(str, keys, options);\n  return regexpToFunction<P>(re, keys, options);\n}\n\n/**\n * Create a path match function from `path-to-regexp` output.\n */\nexport function regexpToFunction<P extends object = object>(\n  re: RegExp,\n  keys: Key[],\n  options: RegexpToFunctionOptions = {},\n): MatchFunction<P> {\n  const { decode = (x: string) => x } = options;\n\n  return function (pathname: string) {\n    const m = re.exec(pathname);\n    if (!m) return false;\n\n    const { 0: path, index } = m;\n    const params = Object.create(null);\n\n    for (let i = 1; i < m.length; i++) {\n      if (m[i] === undefined) continue;\n\n      const key = keys[i - 1];\n\n      if (key.modifier === \"*\" || key.modifier === \"+\") {\n        params[key.name] = m[i].split(key.prefix + key.suffix).map((value) => {\n          return decode(value, key);\n        });\n      } else {\n        params[key.name] = decode(m[i], key);\n      }\n    }\n\n    return { path, index, params };\n  };\n}\n\n/**\n * Escape a regular expression string.\n */\nfunction escapeString(str: string) {\n  return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, \"\\\\$1\");\n}\n\n/**\n * Get the flags for a regexp from the options.\n */\nfunction flags(options?: { sensitive?: boolean }) {\n  return options && options.sensitive ? \"\" : \"i\";\n}\n\n/**\n * Metadata about a key.\n */\nexport interface Key {\n  name: string | number;\n  prefix: string;\n  suffix: string;\n  pattern: string;\n  modifier: string;\n}\n\n/**\n * A token is a string (nothing special) or key metadata (capture group).\n */\nexport type Token = string | Key;\n\n/**\n * Pull out keys from a regexp.\n */\nfunction regexpToRegexp(path: RegExp, keys?: Key[]): RegExp {\n  if (!keys) return path;\n\n  const groupsRegex = /\\((?:\\?<(.*?)>)?(?!\\?)/g;\n\n  let index = 0;\n  let execResult = groupsRegex.exec(path.source);\n  while (execResult) {\n    keys.push({\n      // Use parenthesized substring match if available, index otherwise\n      name: execResult[1] || index++,\n      prefix: \"\",\n      suffix: \"\",\n      modifier: \"\",\n      pattern: \"\",\n    });\n    execResult = groupsRegex.exec(path.source);\n  }\n\n  return path;\n}\n\n/**\n * Transform an array into a regexp.\n */\nfunction arrayToRegexp(\n  paths: Array<string | RegExp>,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions,\n): RegExp {\n  const parts = paths.map((path) => pathToRegexp(path, keys, options).source);\n  return new RegExp(`(?:${parts.join(\"|\")})`, flags(options));\n}\n\n/**\n * Create a path regexp from string input.\n */\nfunction stringToRegexp(\n  path: string,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions,\n) {\n  return tokensToRegexp(parse(path, options), keys, options);\n}\n\nexport interface TokensToRegexpOptions {\n  /**\n   * When `true` the regexp will be case sensitive. (default: `false`)\n   */\n  sensitive?: boolean;\n  /**\n   * When `true` the regexp won't allow an optional trailing delimiter to match. (default: `false`)\n   */\n  strict?: boolean;\n  /**\n   * When `true` the regexp will match to the end of the string. (default: `true`)\n   */\n  end?: boolean;\n  /**\n   * When `true` the regexp will match from the beginning of the string. (default: `true`)\n   */\n  start?: boolean;\n  /**\n   * Sets the final character for non-ending optimistic matches. (default: `/`)\n   */\n  delimiter?: string;\n  /**\n   * List of characters that can also be \"end\" characters.\n   */\n  endsWith?: string;\n  /**\n   * Encode path tokens for use in the `RegExp`.\n   */\n  encode?: (value: string) => string;\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n */\nexport function tokensToRegexp(\n  tokens: Token[],\n  keys?: Key[],\n  options: TokensToRegexpOptions = {},\n) {\n  const {\n    strict = false,\n    start = true,\n    end = true,\n    encode = (x: string) => x,\n    delimiter = \"/#?\",\n    endsWith = \"\",\n  } = options;\n  const endsWithRe = `[${escapeString(endsWith)}]|$`;\n  const delimiterRe = `[${escapeString(delimiter)}]`;\n  let route = start ? \"^\" : \"\";\n\n  // Iterate over the tokens and create our regexp string.\n  for (const token of tokens) {\n    if (typeof token === \"string\") {\n      route += escapeString(encode(token));\n    } else {\n      const prefix = escapeString(encode(token.prefix));\n      const suffix = escapeString(encode(token.suffix));\n\n      if (token.pattern) {\n        if (keys) keys.push(token);\n\n        if (prefix || suffix) {\n          if (token.modifier === \"+\" || token.modifier === \"*\") {\n            const mod = token.modifier === \"*\" ? \"?\" : \"\";\n            route += `(?:${prefix}((?:${token.pattern})(?:${suffix}${prefix}(?:${token.pattern}))*)${suffix})${mod}`;\n          } else {\n            route += `(?:${prefix}(${token.pattern})${suffix})${token.modifier}`;\n          }\n        } else {\n          if (token.modifier === \"+\" || token.modifier === \"*\") {\n            throw new TypeError(\n              `Can not repeat \"${token.name}\" without a prefix and suffix`,\n            );\n          }\n\n          route += `(${token.pattern})${token.modifier}`;\n        }\n      } else {\n        route += `(?:${prefix}${suffix})${token.modifier}`;\n      }\n    }\n  }\n\n  if (end) {\n    if (!strict) route += `${delimiterRe}?`;\n\n    route += !options.endsWith ? \"$\" : `(?=${endsWithRe})`;\n  } else {\n    const endToken = tokens[tokens.length - 1];\n    const isEndDelimited =\n      typeof endToken === \"string\"\n        ? delimiterRe.indexOf(endToken[endToken.length - 1]) > -1\n        : endToken === undefined;\n\n    if (!strict) {\n      route += `(?:${delimiterRe}(?=${endsWithRe}))?`;\n    }\n\n    if (!isEndDelimited) {\n      route += `(?=${delimiterRe}|${endsWithRe})`;\n    }\n  }\n\n  return new RegExp(route, flags(options));\n}\n\n/**\n * Supported `path-to-regexp` input types.\n */\nexport type Path = string | RegExp | Array<string | RegExp>;\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n */\nexport function pathToRegexp(\n  path: Path,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions,\n) {\n  if (path instanceof RegExp) return regexpToRegexp(path, keys);\n  if (Array.isArray(path)) return arrayToRegexp(path, keys, options);\n  return stringToRegexp(path, keys, options);\n}\n", "import { match } from \"path-to-regexp\";\n\n//note: this explicitly does not include the * character, as pages requires this\nconst escapeRegex = /[.+?^${}()|[\\]\\\\]/g;\n\ntype HTTPMethod =\n\t| \"HEAD\"\n\t| \"OPTIONS\"\n\t| \"GET\"\n\t| \"POST\"\n\t| \"PUT\"\n\t| \"PATCH\"\n\t| \"DELETE\";\n\n/* TODO: Grab these from @cloudflare/workers-types instead */\ntype Params<P extends string = string> = Record<P, string | string[]>;\n\ntype EventContext<Env, P extends string, Data> = {\n\trequest: Request;\n\tfunctionPath: string;\n\twaitUntil: (promise: Promise<unknown>) => void;\n\tpassThroughOnException: () => void;\n\tnext: (input?: Request | string, init?: RequestInit) => Promise<Response>;\n\tenv: Env & { ASSETS: { fetch: typeof fetch } };\n\tparams: Params<P>;\n\tdata: Data;\n};\n\ndeclare type PagesFunction<\n\tEnv = unknown,\n\tP extends string = string,\n\tData extends Record<string, unknown> = Record<string, unknown>,\n> = (context: EventContext<Env, P, Data>) => Response | Promise<Response>;\n/* end @cloudflare/workers-types */\n\ntype RouteHandler = {\n\troutePath: string;\n\tmountPath: string;\n\tmethod?: HTTPMethod;\n\tmodules: PagesFunction[];\n\tmiddlewares: PagesFunction[];\n};\n\n// inject `routes` via ESBuild\ndeclare const routes: RouteHandler[];\n// define `__FALLBACK_SERVICE__` via ESBuild\ndeclare const __FALLBACK_SERVICE__: string;\n\n// expect an ASSETS fetcher binding pointing to the asset-server stage\ntype FetchEnv = {\n\t[name: string]: { fetch: typeof fetch };\n\tASSETS: { fetch: typeof fetch };\n};\n\ntype WorkerContext = {\n\twaitUntil: (promise: Promise<unknown>) => void;\n\tpassThroughOnException: () => void;\n};\n\nfunction* executeRequest(request: Request) {\n\tconst requestPath = new URL(request.url).pathname;\n\n\t// First, iterate through the routes (backwards) and execute \"middlewares\" on partial route matches\n\tfor (const route of [...routes].reverse()) {\n\t\tif (route.method && route.method !== request.method) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// replaces with \"\\\\$&\", this prepends a backslash to the matched string, e.g. \"[\" becomes \"\\[\"\n\t\tconst routeMatcher = match(route.routePath.replace(escapeRegex, \"\\\\$&\"), {\n\t\t\tend: false,\n\t\t});\n\t\tconst mountMatcher = match(route.mountPath.replace(escapeRegex, \"\\\\$&\"), {\n\t\t\tend: false,\n\t\t});\n\t\tconst matchResult = routeMatcher(requestPath);\n\t\tconst mountMatchResult = mountMatcher(requestPath);\n\t\tif (matchResult && mountMatchResult) {\n\t\t\tfor (const handler of route.middlewares.flat()) {\n\t\t\t\tyield {\n\t\t\t\t\thandler,\n\t\t\t\t\tparams: matchResult.params as Params,\n\t\t\t\t\tpath: mountMatchResult.path,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n\n\t// Then look for the first exact route match and execute its \"modules\"\n\tfor (const route of routes) {\n\t\tif (route.method && route.method !== request.method) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst routeMatcher = match(route.routePath.replace(escapeRegex, \"\\\\$&\"), {\n\t\t\tend: true,\n\t\t});\n\t\tconst mountMatcher = match(route.mountPath.replace(escapeRegex, \"\\\\$&\"), {\n\t\t\tend: false,\n\t\t});\n\t\tconst matchResult = routeMatcher(requestPath);\n\t\tconst mountMatchResult = mountMatcher(requestPath);\n\t\tif (matchResult && mountMatchResult && route.modules.length) {\n\t\t\tfor (const handler of route.modules.flat()) {\n\t\t\t\tyield {\n\t\t\t\t\thandler,\n\t\t\t\t\tparams: matchResult.params as Params,\n\t\t\t\t\tpath: matchResult.path,\n\t\t\t\t};\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\nexport default {\n\tasync fetch(\n\t\toriginalRequest: Request,\n\t\tenv: FetchEnv,\n\t\tworkerContext: WorkerContext\n\t) {\n\t\tlet request = originalRequest;\n\t\tconst handlerIterator = executeRequest(request);\n\t\tlet data = {}; // arbitrary data the user can set between functions\n\t\tlet isFailOpen = false;\n\n\t\tconst next = async (input?: RequestInfo, init?: RequestInit) => {\n\t\t\tif (input !== undefined) {\n\t\t\t\tlet url = input;\n\t\t\t\tif (typeof input === \"string\") {\n\t\t\t\t\turl = new URL(input, request.url).toString();\n\t\t\t\t}\n\t\t\t\trequest = new Request(url, init);\n\t\t\t}\n\n\t\t\tconst result = handlerIterator.next();\n\t\t\t// Note we can't use `!result.done` because this doesn't narrow to the correct type\n\t\t\tif (result.done === false) {\n\t\t\t\tconst { handler, params, path } = result.value;\n\t\t\t\tconst context = {\n\t\t\t\t\trequest: new Request(request.clone()),\n\t\t\t\t\tfunctionPath: path,\n\t\t\t\t\tnext,\n\t\t\t\t\tparams,\n\t\t\t\t\tget data() {\n\t\t\t\t\t\treturn data;\n\t\t\t\t\t},\n\t\t\t\t\tset data(value) {\n\t\t\t\t\t\tif (typeof value !== \"object\" || value === null) {\n\t\t\t\t\t\t\tthrow new Error(\"context.data must be an object\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// user has overriden context.data, so we need to merge it with the existing data\n\t\t\t\t\t\tdata = value;\n\t\t\t\t\t},\n\t\t\t\t\tenv,\n\t\t\t\t\twaitUntil: workerContext.waitUntil.bind(workerContext),\n\t\t\t\t\tpassThroughOnException: () => {\n\t\t\t\t\t\tisFailOpen = true;\n\t\t\t\t\t},\n\t\t\t\t};\n\n\t\t\t\tconst response = await handler(context);\n\n\t\t\t\tif (!(response instanceof Response)) {\n\t\t\t\t\tthrow new Error(\"Your Pages function should return a Response\");\n\t\t\t\t}\n\n\t\t\t\treturn cloneResponse(response);\n\t\t\t} else if (__FALLBACK_SERVICE__) {\n\t\t\t\t// There are no more handlers so finish with the fallback service (`env.ASSETS.fetch` in Pages' case)\n\t\t\t\tconst response = await env[__FALLBACK_SERVICE__].fetch(request);\n\t\t\t\treturn cloneResponse(response);\n\t\t\t} else {\n\t\t\t\t// There was not fallback service so actually make the request to the origin.\n\t\t\t\tconst response = await fetch(request);\n\t\t\t\treturn cloneResponse(response);\n\t\t\t}\n\t\t};\n\n\t\ttry {\n\t\t\treturn await next();\n\t\t} catch (error) {\n\t\t\tif (isFailOpen) {\n\t\t\t\tconst response = await env[__FALLBACK_SERVICE__].fetch(request);\n\t\t\t\treturn cloneResponse(response);\n\t\t\t}\n\n\t\t\tthrow error;\n\t\t}\n\t},\n};\n\n// This makes a Response mutable\nconst cloneResponse = (response: Response) =>\n\t// https://fetch.spec.whatwg.org/#null-body-status\n\tnew Response(\n\t\t[101, 204, 205, 304].includes(response.status) ? null : response.body,\n\t\tresponse\n\t);\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"C:\\\\Users\\\\marti\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\wrangler\\\\templates\\\\pages-template-worker.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"C:\\\\Users\\\\marti\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"C:\\\\Users\\\\marti\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"C:\\\\Users\\\\marti\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\wrangler\\\\templates\\\\pages-template-worker.ts\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"D:\\\\Documents\\\\CODING\\\\JAVASCRIPT\\\\react-chatbot-airtable\\\\.wrangler\\\\tmp\\\\bundle-AhkaoE\\\\middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"C:\\\\Users\\\\marti\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\common.ts\";\nimport type { WorkerEntrypointConstructor } from \"D:\\\\Documents\\\\CODING\\\\JAVASCRIPT\\\\react-chatbot-airtable\\\\.wrangler\\\\tmp\\\\bundle-AhkaoE\\\\middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"D:\\\\Documents\\\\CODING\\\\JAVASCRIPT\\\\react-chatbot-airtable\\\\.wrangler\\\\tmp\\\\bundle-AhkaoE\\\\middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": ["onRequest", "saveToAirtable", "onRequest", "saveToAirtable", "onRequest", "value", "_a", "result", "char", "prefix", "i"]
}
